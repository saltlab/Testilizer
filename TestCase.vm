package generated;

import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import org.openqa.selenium.*;
import org.openqa.selenium.firefox.FirefoxDriver;


/*
 * Generated @ ${date}
 */

public class ${classname} {

	private WebDriver driver;
	private String url;
	private boolean acceptNextAlert = true;
	private StringBuffer verificationErrors = new StringBuffer();

	@Before
	public void setUp() throws Exception {
		driver = new FirefoxDriver();
		url = "${url}";
		driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
	}

	@After
	public void tearDown() throws Exception {
		String verificationErrorString = verificationErrors.toString();
		if (!"".equals(verificationErrorString)) {
			fail(verificationErrorString);
		}
	}



	@Before
	public static void oneTimeSetUp(){
		try {
#if(${database})
			//use database for data
			testSuiteHelper = new TestSuiteHelper(getTestConfiguration());
#else
			//load needed data from xml files
			testSuiteHelper = new TestSuiteHelper(getTestConfiguration(),"${xmlstates}","${xmleventables}", URL);
#end
		}
		catch (Exception e) {
			fail(e.getMessage());
		}
	}
	

	
	/*
	 * Test Cases
	 */
	 
#foreach( $method in $methodList )
	@Test
	public void method_${method.methodName}(){
		try {
			driver.get(url);

#if(${method.methodName} != "method_0")
			assertTrue("Invariants satisfied in initial state" , testSuiteHelper.checkInvariants());
			
#end
#foreach( $event in $method.eventList )
#if(${event.properties.how} == "index")
			//initial state
#else
			//${event.properties.info}
#if($event.formInputs.size() > 0)
			formInputs = new ArrayList<FormInput>();
#foreach( $input in $event.formInputs )
			formInputs.add(new FormInput("${input.type}", new Identification(How.${input.how}, "${input.name}"), "${input.value}"));
#end			
			testSuiteHelper.handleFormInputs(formInputs);
			Thread.sleep(100);
#end
			assertTrue("Event fired: ${event.properties.text}", testSuiteHelper.fireEvent(${event.properties.id}));
#end

			assertTrue("Invariants satisfied in state: ${event.properties.targetid}" , testSuiteHelper.checkInvariants());
			//assertTrue("State equivalent with: ${event.properties.targetid}", testSuiteHelper.compareCurrentDomWithState(${event.properties.targetid}));
#end
		
			driver.quit();
		
		} catch (Exception e) {
			fail(e.getMessage());
		}
	}

#end



	/*
	 * Auxiliary methods 
	 */
	 
  private boolean isElementPresent(By by) {
    try {
      driver.findElement(by);
      return true;
    } catch (NoSuchElementException e) {
      return false;
    }
  }

  private boolean isAlertPresent() {
    try {
      driver.switchTo().alert();
      return true;
    } catch (NoAlertPresentException e) {
      return false;
    }
  }

  private String closeAlertAndGetItsText() {
    try {
      Alert alert = driver.switchTo().alert();
      String alertText = alert.getText();
      if (acceptNextAlert) {
        alert.accept();
      } else {
        alert.dismiss();
      }
      return alertText;
    } finally {
      acceptNextAlert = true;
    }
  }

}	 
